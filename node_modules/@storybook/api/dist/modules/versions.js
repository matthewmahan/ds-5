"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.includes");

require("core-js/modules/es.object.assign");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.promise");

require("core-js/modules/es.string.includes");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

require("regenerator-runtime/runtime");

var _global = require("global");

var _semver = _interopRequireDefault(require("semver"));

var _memoizerific = _interopRequireDefault(require("memoizerific"));

var _version = require("../version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var getVersionCheckData = (0, _memoizerific["default"])(1)(function () {
  try {
    return Object.assign({}, JSON.parse(_global.VERSIONCHECK).data || {});
  } catch (e) {
    return {};
  }
});

function _default(_ref) {
  var store = _ref.store,
      mode = _ref.mode;

  var _store$getState = store.getState(),
      dismissedVersionNotification = _store$getState.dismissedVersionNotification;

  var state = {
    versions: Object.assign({
      current: {
        version: _version.version
      }
    }, getVersionCheckData()),
    dismissedVersionNotification: dismissedVersionNotification
  };
  var api = {
    getCurrentVersion: function getCurrentVersion() {
      var _store$getState2 = store.getState(),
          current = _store$getState2.versions.current;

      return current;
    },
    getLatestVersion: function getLatestVersion() {
      var _store$getState3 = store.getState(),
          _store$getState3$vers = _store$getState3.versions,
          latest = _store$getState3$vers.latest,
          next = _store$getState3$vers.next,
          current = _store$getState3$vers.current;

      if (current && _semver["default"].prerelease(current.version) && next) {
        return latest && _semver["default"].gt(latest.version, next.version) ? latest : next;
      }

      return latest;
    },
    versionUpdateAvailable: function versionUpdateAvailable() {
      var latest = api.getLatestVersion();
      var current = api.getCurrentVersion();

      if (latest) {
        if (!latest.version) {
          return true;
        }

        if (!current.version) {
          return true;
        }

        var onPrerelease = !!_semver["default"].prerelease(current.version);
        var actualCurrent = onPrerelease ? "".concat(_semver["default"].major(current.version), ".").concat(_semver["default"].minor(current.version), ".").concat(_semver["default"].patch(current.version)) : current.version;

        var diff = _semver["default"].diff(actualCurrent, latest.version);

        return _semver["default"].gt(latest.version, actualCurrent) && diff !== 'patch' && !diff.includes('pre');
      }

      return false;
    }
  }; // Grab versions from the server/local storage right away

  function init(_ref2) {
    var fullApi, _store$getState4, _store$getState4$vers, versions, _getVersionCheckData, latest, next, latestVersion, diff;

    return regeneratorRuntime.async(function init$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fullApi = _ref2.api;
            _store$getState4 = store.getState(), _store$getState4$vers = _store$getState4.versions, versions = _store$getState4$vers === void 0 ? {} : _store$getState4$vers;
            _getVersionCheckData = getVersionCheckData(), latest = _getVersionCheckData.latest, next = _getVersionCheckData.next;
            _context.next = 5;
            return regeneratorRuntime.awrap(store.setState({
              versions: Object.assign({}, versions, {
                latest: latest,
                next: next
              })
            }));

          case 5:
            if (api.versionUpdateAvailable()) {
              latestVersion = api.getLatestVersion().version;
              diff = _semver["default"].diff(versions.current.version, versions.latest.version);

              if (latestVersion !== dismissedVersionNotification && diff !== 'patch' && !_semver["default"].prerelease(latestVersion) && mode !== 'production') {
                fullApi.addNotification({
                  id: 'update',
                  link: '/settings/about',
                  content: "\uD83C\uDF89 Storybook ".concat(latestVersion, " is available!"),
                  onClear: function onClear() {
                    store.setState({
                      dismissedVersionNotification: latestVersion
                    }, {
                      persistence: 'permanent'
                    });
                  }
                });
              }
            }

          case 6:
          case "end":
            return _context.stop();
        }
      }
    });
  }

  return {
    init: init,
    state: state,
    api: api
  };
}